분할정복 알고리즘 (Divide and Conquer Algorithm)
 - 주어진 문제의 크기가 감당하기 어려운 경우 보다 작은 문제로 나누어 해결하는 알고리즘
 - 이진검색, 퀵 정렬, 합병정렬 등이 예

이진 검색 (Binary Search)
 - 정렬된 데이터 리스트에서 목표값 또는 목표값이 있는 위치를 빠른 시간에 찾는 분할 정복 알고리즘의 하나
 - 정렬된 데이터라는 조건이 있다
 - 시간 복잡도 : O(log(n))
 - 이 검색 알고리즘 프로세스 :
 - - 1) 현재 탐색 구간의 가운데 배열번호(index) mid를 구한다 {mid = (low + high) / 2}
 - - 2) A[mid]값과 target값을 비교한다
 - - - 2.1) A[mid] == target // 목표값 또는 목표값의 위치 찾음
 - - - 2.1) A[mid] < target // low = mid + 1로 하여 검색 범위 조정
 - - - 2.1) A[mid] > target // high = mid - 1로 하여 검색 범위 조정
 - - 3) 탐색 구간이 남아있고 값을 찾지 못한경우는 위의 1), 2)번 과정 반복
 - - 4) low > high (탐색구간이 없는 경우)는 목표값이 존재 하지 않음을 나타낸다

퀵정렬 (Quick Sort)
 - 원소들간의 비교와 교환을 통하여 정렬하는 비고기반정렬 알고리즘
 - 원소들 중에 같은 값이 있는 경우 정렬후에 이들의 순서가 바뀔수 있는 불안정 정렬이다
 - 시간복잡도 : 평균 O(N * logN), 최악 O(N^2)
 - 합병정렬과 다르게 비대칭 분할이 이루어지며 분할과 정복 과정은 있으나 합병과정이 없다
 - 오름차순 알고리즘
 - - 배열 arr[], 구간 시작 인덱스 low, 끝 인덱스 high
 - - 1) low >= high 라면 현재 구간은 정렬된 것으로 본다.
 - - 2) 분할(Divide) 과정 :
 - - - 구간내의 임의의 원소를 pivot값으로 정한다. 여기서는 pivot = arr[high]로 정한다
 - - - 2.1) pivot 이하의 값들은 배열의 왼쪽에 이상의 값은 오른쪽에 배치한다.
 - - - 2.2) pivot의 자리를 찾아준다.
 - - - - pivot을 제외한 부분을 3구간으로 나누어 처리한다.
 - - - - 2.2.1) arr[low] ~ arr[i] : pivot보다 작거나 같은 값들로 이루어진 구간
 - - - - 2.2.2) arr[i + 1] ~ arr[j] : pivot보다 크거나 같은 값들로 이루어진 구간
 - - - - 2.2.3) arr[j + 1] ~ arr[high - 1] : 아직 처리되지 않은 구간
 - - - - 이 과정을 의사코드로 표현
 - - - - - i = low -1;
 - - - - - for (j = low; j<high; j=j+1){
 - - - - -  if(arr[j] < pivot) swap(arr[++i], arr[j]);
 - - - - - }
 - - - - - swap(arr[++i], arr[high]);
 - - 3) 정복(Conquer) 과정 :
 - - - pivot을 기준으로 왼쪽과 오른쪽을 재귀호출하여 정렬 시킨다.
 - - - quickSort(arr, low, i-1)
 - - - quickSort(arr, i+1, high)

합병(병합)정렬 (Merge Sort)
 - 원소들간의 비교와 교환을 통하여 정렬하는 비교기반정렬 알고리즘의
 - 원소들 중에 같은 값이 있는 경우 정렬후에도 이들의 순서가 유지되는 안정 정렬
 - 시간복잡도 : O(N * logN)
 - 정렬과정 : 분할 - 정복 - 결합
 - 합병정렬(오름차순) 알고리즘 프로세스
 - - 정렬할 배열 : arr[], 구간의 시작 인덱스 : low, 끝 인덱스 : high
 - - 1) low >= high 라면 현재 구간은 정렬된 것으로 본다.
 - - 2) 분할(Divide)과정 : 구간의 중앙을 구한다. mid=(low + high) / 2;
 - - 3) 정복(Conquer) 과정 : 나누어진 두 구간을 재귀적으로 정렬한다
 - - 4) 결합(Combine) 과정 : 정렬된 두 구간을 이용하여 정렬된 하나의 구간을 만들어 임시 배열을 만든다
 - - 5) 복사(Copy) 과정 : 결합이 완성된 임시 배열 arr2[]를 arr[]에 복사한다.

STL(Standard Template Library)
 - 알고리즘, 컨테이너, 함수객체, 반복자로 구성된 c++을 위한 라이브러리이다.
 - std::Sort
 - 함수 원형은 두가지 포맷이 있다.
 - 1) void sort(void sort (RandomAccessIterator first, RandomAccessIterator last);
 - - sort(구간의 시작 포인터, 구간의 끝 포인터);
 - 2) void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);
 - - sort(구간의 시작 포인터, 구간의 끝 포인터, 정렬기준함수[객체]);​
 -  <algorithm> 헤더를 include 하거나 이 헤더를 포함하는 다른 어떤 헤더를 include 하여 사용한다.
 - 시간 복잡도 : O(N * logN)
 - stl-sort 를 intro-sort(introspective sort : 자기성찰적인 정렬)라고 하는데 그 이유는 다음 3가지 정렬을 포함하고 있기 때문이다.
 - 1) GCC의 경우 원소의 수가 16이하인 경우 삽입정렬을 이용(<bits/stl_algo.h> 에서 _S_threshold = 16)
 - 2) 그 외의 경우 퀵정렬을 이용
 - 3) 재귀의 깊이가 logN을 넘어가는 경우 힙정렬(logN을 보증하는 정렬)을 이용
